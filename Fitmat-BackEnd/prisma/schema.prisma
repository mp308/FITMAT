generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  USER_BRONZE
  USER_GOLD
  USER_PLATINUM
  TRAINER
  ADMIN
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  passwordHash     String
  username         String?           @unique
  profileImage     String?
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  writtenReviews   TrainerReview[]   @relation("ReviewerReviews")
  receivedReviews  TrainerReview[]   @relation("TrainerReviews")
  classesCreated   Class[]           @relation("AdminClasses")
  classesTaught    Class[]           @relation("TrainerClasses")
  classEnrollments ClassEnrollment[]
  paymentProofs    PaymentProof[]
}

model TrainerReview {
  id          Int      @id @default(autoincrement())
  reviewer    User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewerId  Int
  trainer     User     @relation("TrainerReviews", fields: [trainerId], references: [id])
  trainerId   Int
  rating      Int?
  comment     String
  createdAt   DateTime @default(now())
}

model ClassCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  classes     Class[]
  createdAt   DateTime @default(now())
}

model Class {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  startTime      DateTime
  endTime        DateTime
  capacity       Int?
  createdBy      User              @relation("AdminClasses", fields: [createdById], references: [id])
  createdById    Int
  trainer        User              @relation("TrainerClasses", fields: [trainerId], references: [id])
  trainerId      Int
  category       ClassCategory?    @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  requiredRole   Role?
  enrollments    ClassEnrollment[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
}

model ClassEnrollment {
  id        Int      @id @default(autoincrement())
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([classId, userId])
}

model ContactRequest {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String
  subject     String
  message     String
  createdAt   DateTime @default(now())
}

model PaymentProof {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  amount      Float?
  note        String?
  filename    String?
  mimeType    String?
  imageBase64 String @db.LongText
  createdAt   DateTime @default(now())
}
